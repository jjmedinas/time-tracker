require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe Api::V1::UsersController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to Api::V1::User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      first_name: "foo", last_name: "bar", email: "foo@bar.com", role: 'employee',
      gender: "m", password: "123456", password_confirmation: "123456"
    }
  }

  let(:invalid_attributes) {
    {
      first_name: "foo", last_name: "bar", email: "foobar.com",
      role: 'employee', gender: "m"
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # Api::V1::UsersController. Be sure to keep this updated too.

  let(:valid_session) { { user_id: create(:admin).id } }

  describe "GET #index" do
    it "returns a success response" do
      user = User.create! valid_attributes

      get :index, params: {}, session: valid_session

      expect(response).to be_successful
    end

    context "filters" do
      it "returns users that match query" do

        create(:user, first_name: "Foo 1", gender: "m")
        create(:user_2, first_name: "Foo 2", gender: "f")
        create(:user_3, first_name: "Bar", gender: "m")

        get :index, params: { sort: "first_name" }, session: valid_session
        expect(JSON.parse(response.body).count).to eq 3

        # Test response is sorted correctly
        expect(JSON.parse(response.body).map{|u| u['first_name']}).to eql(
          ["Bar", "Foo 1", "Foo 2"])

        get :index, params: { first_name: "foo" }, session: valid_session
        expect(JSON.parse(response.body).count).to eq 2

        get :index, params: { first_name: "foo", gender: "m" }, session: valid_session

        expect(JSON.parse(response.body).count).to eq 1

      end
    end

  end

  describe "GET #show" do
    it "returns a success response" do
      user = User.create! valid_attributes
      get :show, params: {id: user.to_param}, session: valid_session

      expect(response).to be_successful
    end

    it "returns a not found response" do
      get :show, params: {id: 123}, session: valid_session

      should respond_with(404)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new User" do
        post :create, params: {user: valid_attributes}, session: valid_session

        should respond_with(201)
      end
    end

    context "with invalid params" do
      it "returns unprocessable entity error code" do
        post :create, params: {user: invalid_attributes}, session: valid_session

        should respond_with(422)
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        { first_name: "Name 2", email: 'email@updated.com' }
      }

      it "updates the requested user" do
        user = User.create! valid_attributes
        expect(user.first_name).to eq "foo"
        expect(user.email).to eq "foo@bar.com"
        put :update, params: {id: user.to_param, user: new_attributes}, session: valid_session
        user.reload

        expect(user.first_name).to eq "Name 2"
        expect(user.email).to eq "email@updated.com"
      end
    end

    context "with invalid params" do
      it "returns unprocessable entity error code" do
        user = User.create! valid_attributes
        put :update, params: {id: user.to_param, user: invalid_attributes}, session: valid_session

        should respond_with(422)
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested user" do
      user = User.create! valid_attributes

      delete :destroy, params: {id: user.to_param}, session: valid_session

      expect(response).to be_successful
    end
  end

end
